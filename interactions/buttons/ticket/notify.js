const {
	ActionRowBuilder,
	ButtonBuilder,
	ButtonStyle,
	PermissionFlagsBits,
} = require("discord.js");
const Ticket = require(`${process.cwd()}/database/models/ticketActions.js`);

module.exports = {
	id: "ticket-notify",

	async execute(interaction, args) {
		if (!interaction.member.permissions.has(PermissionFlagsBits.MoveMembers))
			return interaction.reply({
				content: "‚ùå | Voc√™ n√£o tem permiss√£o para usar este bot√£o.",
				ephemeral: true
			});

		const ticket = await Ticket.findOne({ channel_id: interaction.channel.id });

		if (!ticket)
			return interaction.reply({
				content: "‚ùå | Este canal n√£o √© um ticket.",
				ephemeral: true,
			});

		const member = await interaction.guild.members.fetch(ticket.members[0]).catch(() => {});

		if (!member)
			return interaction.reply({
				content: "‚ùå | O usu√°rio deste ticket n√£o est√° no servidor.",
				ephemeral: true,
			});

		await interaction.deferReply({ ephemeral: true });

		const res = await member.send({
			content: `üé´ | ${interaction.user} te mandou uma notifica√ß√£o sobre o ticket ${interaction.channel}.`,
			components: [
				new ActionRowBuilder().addComponents(
					new ButtonBuilder()
						.setStyle(ButtonStyle.Link)
						.setLabel("Ir para o ticket")
						.setURL(interaction.channel.url)
						.setEmoji("üé´")
				),
			],
		}).catch(() => null);

		if (!res)
			return interaction.editReply({
				content: `‚ùå | N√£o foi poss√≠vel enviar a notifica√ß√£o para ${member}, provavelmente o usu√°rio est√° com a DM bloqueada.`,
			});
		else
			return interaction.editReply({
				content: `‚úÖ | Notifica√ß√£o enviada para ${member}.`,
			});
	},
};
